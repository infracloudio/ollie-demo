// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Response response
// swagger:model Response
type Response struct {

	// card
	Card *Card `json:"card,omitempty"`

	// output speech
	OutputSpeech *OutputSpeech `json:"outputSpeech,omitempty"`

	// reprompt
	Reprompt *Reprompt `json:"reprompt,omitempty"`

	// should end session
	ShouldEndSession *bool `json:"shouldEndSession,omitempty"`
}

// Validate validates this response
func (m *Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOutputSpeech(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReprompt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Response) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {

		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *Response) validateOutputSpeech(formats strfmt.Registry) error {

	if swag.IsZero(m.OutputSpeech) { // not required
		return nil
	}

	if m.OutputSpeech != nil {

		if err := m.OutputSpeech.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outputSpeech")
			}
			return err
		}
	}

	return nil
}

func (m *Response) validateReprompt(formats strfmt.Registry) error {

	if swag.IsZero(m.Reprompt) { // not required
		return nil
	}

	if m.Reprompt != nil {

		if err := m.Reprompt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reprompt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Response) UnmarshalBinary(b []byte) error {
	var res Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
