// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AudioPlayer audio player
// swagger:model AudioPlayer
type AudioPlayer struct {

	// offset in milliseconds
	OffsetInMilliseconds int32 `json:"offsetInMilliseconds,omitempty"`

	// Indicates the last known state of audio
	PlayerActivity string `json:"playerActivity,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this audio player
func (m *AudioPlayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlayerActivity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var audioPlayerTypePlayerActivityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IDLE","PAUSED","PLAYING","BUFFER_UNDERRUN","FINISHED","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		audioPlayerTypePlayerActivityPropEnum = append(audioPlayerTypePlayerActivityPropEnum, v)
	}
}

const (
	// AudioPlayerPlayerActivityIDLE captures enum value "IDLE"
	AudioPlayerPlayerActivityIDLE string = "IDLE"
	// AudioPlayerPlayerActivityPAUSED captures enum value "PAUSED"
	AudioPlayerPlayerActivityPAUSED string = "PAUSED"
	// AudioPlayerPlayerActivityPLAYING captures enum value "PLAYING"
	AudioPlayerPlayerActivityPLAYING string = "PLAYING"
	// AudioPlayerPlayerActivityBUFFERUNDERRUN captures enum value "BUFFER_UNDERRUN"
	AudioPlayerPlayerActivityBUFFERUNDERRUN string = "BUFFER_UNDERRUN"
	// AudioPlayerPlayerActivityFINISHED captures enum value "FINISHED"
	AudioPlayerPlayerActivityFINISHED string = "FINISHED"
	// AudioPlayerPlayerActivitySTOPPED captures enum value "STOPPED"
	AudioPlayerPlayerActivitySTOPPED string = "STOPPED"
)

// prop value enum
func (m *AudioPlayer) validatePlayerActivityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, audioPlayerTypePlayerActivityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AudioPlayer) validatePlayerActivity(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayerActivity) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlayerActivityEnum("playerActivity", "body", m.PlayerActivity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AudioPlayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AudioPlayer) UnmarshalBinary(b []byte) error {
	var res AudioPlayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
