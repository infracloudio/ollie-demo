// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Slots slots
// swagger:model Slots
type Slots struct {

	// direction
	Direction *SlotName `json:"direction,omitempty"`

	// duration
	Duration *SlotName `json:"duration,omitempty"`

	// speed
	Speed *SlotName `json:"speed,omitempty"`

	// trick
	Trick *SlotName `json:"trick,omitempty"`
}

// Validate validates this slots
func (m *Slots) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrick(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Slots) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if m.Direction != nil {

		if err := m.Direction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direction")
			}
			return err
		}
	}

	return nil
}

func (m *Slots) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {

		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *Slots) validateSpeed(formats strfmt.Registry) error {

	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	if m.Speed != nil {

		if err := m.Speed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("speed")
			}
			return err
		}
	}

	return nil
}

func (m *Slots) validateTrick(formats strfmt.Registry) error {

	if swag.IsZero(m.Trick) { // not required
		return nil
	}

	if m.Trick != nil {

		if err := m.Trick.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trick")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Slots) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Slots) UnmarshalBinary(b []byte) error {
	var res Slots
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
